<script>
(function(w,d,s,g,js,fs){
  g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(f){this.q.push(f);}};
  js=d.createElement(s);fs=d.getElementsByTagName(s)[0];
  js.src='https://apis.google.com/js/platform.js';
  fs.parentNode.insertBefore(js,fs);js.onload=function(){g.load('analytics');};
}(window,document,'script'));

!function(t){function e(r){if(i[r])return i[r].exports;var s=i[r]={exports:{},id:r,loaded:!1};return t[r].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){var r=i(1);gapi.analytics.ready(function(){function t(t,e,i){t.innerHTML=e.map(function(t){var e=t.id==i?"selected ":" ";return"<option "+e+'value="'+t.id+'">'+t.name+"</option>"}).join("")}function e(t){return t.ids||t.viewId?{prop:"viewId",value:t.viewId||t.ids&&t.ids.replace(/^ga:/,"")}:t.propertyId?{prop:"propertyId",value:t.propertyId}:t.accountId?{prop:"accountId",value:t.accountId}:void 0}gapi.analytics.createComponent("ViewSelector2",{execute:function(){return this.setup_(function(){this.updateAccounts_(),this.changed_&&(this.render_(),this.onChange_())}.bind(this)),this},set:function(t){if(!!t.ids+!!t.viewId+!!t.propertyId+!!t.accountId>1)throw new Error('You cannot specify more than one of the following options: "ids", "viewId", "accountId", "propertyId"');if(t.container&&this.container)throw new Error("You cannot change containers once a view selector has been rendered on the page.");var e=this.get();return(e.ids!=t.ids||e.viewId!=t.viewId||e.propertyId!=t.propertyId||e.accountId!=t.accountId)&&(e.ids=null,e.viewId=null,e.propertyId=null,e.accountId=null),gapi.analytics.Component.prototype.set.call(this,t)},setup_:function(t){function e(){r.get().then(function(e){i.summaries=e,i.accounts=i.summaries.all(),t()},function(t){i.emit("error",t)})}var i=this;gapi.analytics.auth.isAuthorized()?e():gapi.analytics.auth.on("success",e)},updateAccounts_:function(){var t,i,r,s=this.get(),n=e(s);if(n)switch(n.prop){case"viewId":t=this.summaries.getProfile(n.value),i=this.summaries.getAccountByProfileId(n.value),r=this.summaries.getWebPropertyByProfileId(n.value);break;case"propertyId":r=this.summaries.getWebProperty(n.value),i=this.summaries.getAccountByWebPropertyId(n.value),t=r&&r.views&&r.views[0];break;case"accountId":i=this.summaries.getAccount(n.value),r=i&&i.properties&&i.properties[0],t=r&&r.views&&r.views[0]}else i=this.accounts[0],r=i&&i.properties&&i.properties[0],t=r&&r.views&&r.views[0];i||r||t?(i!=this.account||r!=this.property||t!=this.view)&&(this.changed_={account:i&&i!=this.account,property:r&&r!=this.property,view:t&&t!=this.view},this.account=i,this.properties=i.properties,this.property=r,this.views=r&&r.views,this.view=t,this.ids=t&&"ga:"+t.id):this.emit("error",new Error("You do not have access to "+n.prop.slice(0,-2)+" : "+n.value))},render_:function(){var e=this.get();this.container="string"==typeof e.container?document.getElementById(e.container):e.container,this.container.innerHTML=e.template||this.template;var i=this.container.querySelectorAll("select"),r=this.accounts,s=this.properties||[{name:"(Empty)",id:""}],n=this.views||[{name:"(Empty)",id:""}];t(i[0],r,this.account.id),t(i[1],s,this.property&&this.property.id),t(i[2],n,this.view&&this.view.id),i[0].onchange=this.onUserSelect_.bind(this,i[0],"accountId"),i[1].onchange=this.onUserSelect_.bind(this,i[1],"propertyId"),i[2].onchange=this.onUserSelect_.bind(this,i[2],"viewId")},onChange_:function(){var t={account:this.account,property:this.property,view:this.view,ids:this.view&&"ga:"+this.view.id};this.changed_&&(this.changed_.account&&this.emit("accountChange",t),this.changed_.property&&this.emit("propertyChange",t),this.changed_.view&&(this.emit("viewChange",t),this.emit("idsChange",t),this.emit("change",t.ids))),this.changed_=null},onUserSelect_:function(t,e){var i={};i[e]=t.value,this.set(i),this.execute()},template:'<div class="ViewSelector2">  <div class="ViewSelector2-item">    <label>Account</label>    <select class="FormField"></select>  </div>  <div class="ViewSelector2-item">    <label>Property</label>    <select class="FormField"></select>  </div>  <div class="ViewSelector2-item">    <label>View</label>    <select class="FormField"></select>  </div></div>'})})},function(t,e,i){function r(){var t=gapi.client.request({path:o}).then(function(t){return t});return new t.constructor(function(e,i){var r=[];t.then(function s(t){var a=t.result;a.items?r=r.concat(a.items):i(new Error("You do not have any Google Analytics accounts. Go to http://google.com/analytics to sign up.")),a.startIndex+a.itemsPerPage<=a.totalResults?gapi.client.request({path:o,params:{"start-index":a.startIndex+a.itemsPerPage}}).then(s):e(new n(r))}).then(null,i)})}var s,n=i(2),o="/analytics/v3/management/accountSummaries";t.exports={get:function(t){return t&&(s=null),s||(s=r())}}},function(t,e,i){function r(t){this.accounts_=t,this.webProperties_=[],this.profiles_=[],this.accountsById_={},this.webPropertiesById_=this.propertiesById_={},this.profilesById_=this.viewsById_={};for(var e,i=0;e=this.accounts_[i];i++)if(this.accountsById_[e.id]={self:e},e.webProperties){s(e,"webProperties","properties");for(var r,n=0;r=e.webProperties[n];n++)if(this.webProperties_.push(r),this.webPropertiesById_[r.id]={self:r,parent:e},r.profiles){s(r,"profiles","views");for(var o,a=0;o=r.profiles[a];a++)this.profiles_.push(o),this.profilesById_[o.id]={self:o,parent:r,grandParent:e}}}}function s(t,e,i){Object.defineProperty?Object.defineProperty(t,i,{get:function(){return t[e]}}):t[i]=t[e]}r.prototype.all=function(){return this.accounts_},s(r.prototype,"all","allAccounts"),r.prototype.allWebProperties=function(){return this.webProperties_},s(r.prototype,"allWebProperties","allProperties"),r.prototype.allProfiles=function(){return this.profiles_},s(r.prototype,"allProfiles","allViews"),r.prototype.get=function(t){if(!!t.accountId+!!t.webPropertyId+!!t.propertyId+!!t.profileId+!!t.viewId>1)throw new Error('get() only accepts an object with a single property: either "accountId", "webPropertyId", "propertyId", "profileId" or "viewId"');return this.getProfile(t.profileId||t.viewId)||this.getWebProperty(t.webPropertyId||t.propertyId)||this.getAccount(t.accountId)},r.prototype.getAccount=function(t){return this.accountsById_[t]&&this.accountsById_[t].self},r.prototype.getWebProperty=function(t){return this.webPropertiesById_[t]&&this.webPropertiesById_[t].self},s(r.prototype,"getWebProperty","getProperty"),r.prototype.getProfile=function(t){return this.profilesById_[t]&&this.profilesById_[t].self},s(r.prototype,"getProfile","getView"),r.prototype.getAccountByProfileId=function(t){return this.profilesById_[t]&&this.profilesById_[t].grandParent},s(r.prototype,"getAccountByProfileId","getAccountByViewId"),r.prototype.getWebPropertyByProfileId=function(t){return this.profilesById_[t]&&this.profilesById_[t].parent},s(r.prototype,"getWebPropertyByProfileId","getPropertyByViewId"),r.prototype.getAccountByWebPropertyId=function(t){return this.webPropertiesById_[t]&&this.webPropertiesById_[t].parent},s(r.prototype,"getAccountByWebPropertyId","getAccountByPropertyId"),t.exports=r}]);
//# sourceMappingURL=view-selector2.js.map

!function(t){function e(s){if(i[s])return i[s].exports;var a=i[s]={exports:{},id:s,loaded:!1};return t[s].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){gapi.analytics.ready(function(){function t(t){if(s.test(t))return t;var a=i.exec(t);if(a)return e(+a[1]);if("today"==t)return e(0);if("yesterday"==t)return e(1);throw new Error("Cannot convert date "+t)}function e(t){var e=new Date;e.setDate(e.getDate()-t);var i=String(e.getMonth()+1);i=1==i.length?"0"+i:i;var s=String(e.getDate());return s=1==s.length?"0"+s:s,e.getFullYear()+"-"+i+"-"+s}var i=/(\d+)daysAgo/,s=/\d{4}\-\d{2}\-\d{2}/;gapi.analytics.createComponent("DateRangeSelector",{execute:function(){var e=this.get();e["start-date"]=e["start-date"]||"7daysAgo",e["end-date"]=e["end-date"]||"yesterday",this.container="string"==typeof e.container?document.getElementById(e.container):e.container,e.template&&(this.template=e.template),this.container.innerHTML=this.template;var i=this.container.querySelectorAll("input");return this.startDateInput=i[0],this.startDateInput.value=t(e["start-date"]),this.endDateInput=i[1],this.endDateInput.value=t(e["end-date"]),this.setValues(),this.setMinMax(),this.container.onchange=this.onChange.bind(this),this},onChange:function(){this.setValues(),this.setMinMax(),this.emit("change",{"start-date":this["start-date"],"end-date":this["end-date"]})},setValues:function(){this["start-date"]=this.startDateInput.value,this["end-date"]=this.endDateInput.value},setMinMax:function(){this.startDateInput.max=this.endDateInput.value,this.endDateInput.min=this.startDateInput.value},template:'<div class="DateRangeSelector">  <div class="DateRangeSelector-item">    <label>Start Date</label>     <input type="date">  </div>  <div class="DateRangeSelector-item">    <label>End Date</label>     <input type="date">  </div></div>'})})}]);
//# sourceMappingURL=date-range-selector.js.map
</script>
<div class = "container">
  <div id="embed-api-auth-container"></div>
  <div id="view-selector-container"></div>
  <h3>Users coming to the site</h3>
  <div id="data-chart-1-container"></div>
  <div id="date-range-selector-1-container"></div>
  <h3>Host Signup</h3>
  <div id="data-chart-2-container"></div>
  <div id="date-range-selector-2-container"></div>
  <h3>Guests Signup </h3>
  <div id="data-chart-3-container"></div>
  <div id="date-range-selector-3-container"></div>
</div>



<script>



gapi.analytics.ready(function() {

  /**
   * Authorize the user immediately if the user has already granted access.
   * If no access has been created, render an authorize button inside the
   * element with the ID "embed-api-auth-container".
   */
  gapi.analytics.auth.authorize({
    container: 'embed-api-auth-container',
    clientid: '1013979448202-kook1ku05af3jnepshno80gl0l66fg4h.apps.googleusercontent.com',
  });


 
  
 
   /**
    * Store a set of DataChart config options that will be used by the different charts 
    */
   var metric1 = {
     query: {
       metrics: 'ga:users',
       dimensions: 'ga:date'
     },
     chart: {
       type: 'LINE',
       options: {
         width: '100%'
       }
     }
   };

   var metric2 = {
     query: {
       metrics: 'ga:goal5Completions',
       dimensions: 'ga:date'
     },
     chart: {
       type: 'LINE',
       options: {
         width: '100%'
       }
     }
   };

   var metric3 = {
     query: {
       metrics: 'ga:goal1Completions',
       dimensions: 'ga:date'
     },
     chart: {
       type: 'LINE',
       options: {
         width: '100%'
       }
     }
   };


   /**
    * Query params representing the chart's date ranges.
    */
   var dateRange1 = {
     'start-date': '14daysAgo',
     'end-date': '8daysAgo'
   };


   var dateRange2 = {
     'start-date': '7daysAgo',
     'end-date': 'yesterday'
   };

   var dateRange3 = {
     'start-date': '7daysAgo',
     'end-date': 'yesterday'
   };


   /**
    * Create a new ViewSelector2 instance to be rendered inside of an
    * element with the id "view-selector-container".
    */
   var viewSelector = new gapi.analytics.ext.ViewSelector2({
     container: 'view-selector-container',
   }).execute();


   /**
    * Create a new DateRangeSelector instance to be rendered inside of an
    * element with the id "date-range-selector-X-container", set its date range
    * and then render it to the page.
    */
   var dateRangeSelector1 = new gapi.analytics.ext.DateRangeSelector({
     container: 'date-range-selector-1-container'
   })
   .set(dateRange1)
   .execute();


   var dateRangeSelector2 = new gapi.analytics.ext.DateRangeSelector({
     container: 'date-range-selector-2-container'
   })
   .set(dateRange2)
   .execute();

   var dateRangeSelector3 = new gapi.analytics.ext.DateRangeSelector({
     container: 'date-range-selector-3-container'
   })
   .set(dateRange3)
   .execute();


   /**
    * Create a new DataChart instance with the given query parameters
    * and Google chart options. It will be rendered inside an element
    * with the id "data-chart-X-container".
    */
   var dataChart1 = new gapi.analytics.googleCharts.DataChart(metric1)
       .set({query: dateRange1})
       .set({chart: {container: 'data-chart-1-container'}});

   var dataChart2 = new gapi.analytics.googleCharts.DataChart(metric2)
       .set({query: dateRange2})
       .set({chart: {container: 'data-chart-2-container'}});


  var dataChart3 = new gapi.analytics.googleCharts.DataChart(metric3)
      .set({query: dateRange3})
      .set({chart: {container: 'data-chart-3-container'}});


   /**
    * Register a handler to run whenever the user changes the view.
    * The handler will update all dataCharts as well as updating the title
    * of the dashboard.
    */
   viewSelector.on('viewChange', function(data) {
     dataChart1.set({query: {ids: data.ids}}).execute();
     dataChart2.set({query: {ids: data.ids}}).execute();
     dataChart3.set({query: {ids: data.ids}}).execute();
     // var title = document.getElementById('view-name');
     // title.innerHTML = data.property.name + ' (' + data.view.name + ')';
   });


   /**
    * Register a handler to run whenever the user changes the date range from
    * the datepicker. The handler will update the dataChart
    * instance as well as change the dashboard subtitle to reflect the range.
    */
   dateRangeSelector1.on('change', function(data) {
     dataChart1.set({query: data}).execute();

     // Update the "from" dates text.
     var datefield = document.getElementById('from-dates');
     datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
   });


   dateRangeSelector2.on('change', function(data) {
     dataChart2.set({query: data}).execute();

     // Update the "to" dates text.
     var datefield = document.getElementById('to-dates');
     datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
   });

   dateRangeSelector3.on('change', function(data) {
     dataChart3.set({query: data}).execute();

     // Update the "to" dates text.
     var datefield = document.getElementById('to-dates');
     datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
   });

 });
 </script>